plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}
apply plugin: 'org.spongepowered.mixin'

version = mod_version
group = mod_group_id

base {
    archivesName = "TerraCurio"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'geckolib.disable_examples', 'true'
        }
        client {}
        server {
            //args '--nogui'
        }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://maven.theillusivec4.top/"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "Modrinth"
        url = uri("https://api.modrinth.com/maven")
        content {
            includeGroup("maven.modrinth")
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("top.theillusivec4.curios:curios-forge:5.7.0+1.20.1")

    compileOnly fg.deobf("mezz.jei:jei-1.20.1-common-api:15.3.0.4")
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-forge-api:15.3.0.4")
    runtimeOnly fg.deobf("mezz.jei:jei-1.20.1-forge:15.3.0.4")

    compileOnly fg.deobf('maven.modrinth:better-combat:1.8.5+1.20.1-forge')
    //runtimeOnly fg.deobf('maven.modrinth:better-combat:1.8.5+1.20.1-forge')
    //runtimeOnly fg.deobf('maven.modrinth:playeranimator:1.0.2-rc1+1.20-forge')
    //runtimeOnly fg.deobf('maven.modrinth:cloth-config:11.1.118+forge')

    compileOnly fg.deobf("curse.maven:tetra-289712:5544287")
    //runtimeOnly fg.deobf("curse.maven:tetra-289712:5544287")
    //runtimeOnly fg.deobf("curse.maven:mutil-351914:4824501") // Tetra的前置

    runtimeOnly fg.deobf("curse.maven:apothic-attributes-898963:5634071") // 神化属性
    runtimeOnly fg.deobf("curse.maven:placebo-283644:5414631")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.6"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.6")) {
        jarJar.ranged(it, "[0.3.6,)")
    }
}

mixin {
    add sourceSets.main, "confluence.refmap.json"
    config 'confluence.mixins.json'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
