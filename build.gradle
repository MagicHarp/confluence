buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

version = mod_version
group = mod_group_id

base {
    archivesName = "Confluence"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'geckolib.disable_examples', 'true'
        }
        client {}
        server {
            //args '--nogui'
        }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
     flatDir {
         dir 'libs'
     }
    maven { // Registrate
        url "https://maven.ithundxr.dev/snapshots"
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroupByRegex("software\\.bernie.*")
            includeGroup("com.eliotlash.mclib")
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://jitpack.io" }
    maven { url "https://maven.firstdarkdev.xyz/snapshots" }
    maven {
        name = "Modrinth"
        url = uri("https://api.modrinth.com/maven")
        content {
            includeGroup("maven.modrinth")
        }
    }
    maven {
        name = "IzzelAliz Maven"
        url = uri("https://maven.izzel.io/releases/")
        content {
            includeGroup("icyllis.modernui")
        }
    }
    maven {
        name = "tterrag maven"
        url = uri("https://maven.tterrag.com/")
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-1.20.1:4.4.2")
    implementation fg.deobf("curse.maven:eventhorizon-890704:5026654")
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:5.7.0+1.20.1")
    implementation fg.deobf('com.github.glitchfiend:TerraBlender-forge:1.20.1-3.0.1.4')
    implementation fg.deobf("com.lowdragmc.shimmer:Shimmer-forge:1.20.1-0.2.4")
    implementation fg.deobf(jarJar("com.xiaohunao.equipment_benediction:EquipmentBenediction:1.20.1-0.0.5")) {
        jarJar.ranged(it, "[1.20.1-0.0.5,)")
    }
    implementation fg.deobf(jarJar("curse.maven:mineteam-1100774:5734043")) {
        jarJar.ranged(it, "[forge-1.20.1-0.0.2,)")
    }
    implementation fg.deobf(jarJar("curse.maven:enemybanner-1005952:5556424")){
        jarJar.ranged(it, "[forge-1.20.1-0.0.7,)")
    }

    compileOnly fg.deobf("mezz.jei:jei-1.20.1-common-api:15.3.0.4")
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-forge-api:15.3.0.4")
    runtimeOnly fg.deobf("mezz.jei:jei-1.20.1-forge:15.3.0.4")

    compileOnly fg.deobf('maven.modrinth:better-combat:1.8.5+1.20.1-forge')
    //runtimeOnly fg.deobf('maven.modrinth:better-combat:1.8.5+1.20.1-forge')
    //runtimeOnly fg.deobf('maven.modrinth:playeranimator:1.0.2-rc1+1.20-forge')
    //runtimeOnly fg.deobf('maven.modrinth:cloth-config:11.1.118+forge')

    compileOnly fg.deobf("curse.maven:jade-324717:5390389")
    runtimeOnly fg.deobf("curse.maven:jade-324717:5390389")

    compileOnly fg.deobf("curse.maven:tetra-289712:5544287")
    //runtimeOnly fg.deobf("curse.maven:tetra-289712:5544287")
    //runtimeOnly fg.deobf("curse.maven:mutil-351914:4824501") // Tetra的前置

    runtimeOnly fg.deobf("curse.maven:worldedit-225608:4586218")
    runtimeOnly fg.deobf("curse.maven:spark-361579:4738952")
    //runtimeOnly fg.deobf("curse.maven:apothic-attributes-898963:5634071") // 神化属性
    //runtimeOnly fg.deobf("curse.maven:placebo-283644:5414631") // 神化属性的前置
    //runtimeOnly fg.deobf("curse.maven:air-hop-323071:5048418") // 多段跳
    //runtimeOnly fg.deobf("curse.maven:puzzles-lib-495476:5475403") // 多段跳的前置

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.6"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.6")) {
        jarJar.ranged(it, "[0.3.6,)")
    }
}

mixin {
    add sourceSets.main, "confluence.refmap.json"
    config 'confluence.mixins.json'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
